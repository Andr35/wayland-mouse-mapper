#!/bin/bash

keyboard=$(libinput list-devices | grep keyboard -B4 | grep -E "keyboard$" -A1 | grep -o '/dev/input/event[1-9]*')
event_type=EV_KEY
action_type=POINTER_BUTTON
pressed="pressed,"

readarray -t devices <<<$(libinput list-devices | grep pointer -B4 | grep -o '/dev/input/event[0-9]*')

# COMMANDS MAP
BTN_EXTRA=(KEY_LEFTMETA KEY_PAGEUP)
BTN_SIDE=(KEY_LEFTMETA KEY_PAGEDOWN)

# Workspaces config
ws_total=$(wmctrl -d | wc -l)
ws_curr=0

# Useful info about wmctrl
# https://askubuntu.com/questions/5229/how-can-i-bind-a-key-to-cycle-between-workspaces

function wsUpdateCurrent(){
    ws_curr=$(wmctrl -d | awk '$2=="*"{print $1}')
}

function wsNext(){
    wsUpdateCurrent;

    if [ "$ws_curr" -lt "$ws_total" ]; then
        wmctrl -s $(($ws_curr + 1))
    fi
}

function wsPrev(){
    wsUpdateCurrent;

    if [ "$ws_curr" -gt "0" ]; then
        wmctrl -s $(($ws_curr - 1))
    fi
}


function pressKey(){
    device=$1; key=$2; value=$3
    # echo "pressing ${key} ${value}"
    # evemu-event ${keyboard} --sync --type ${event_type} --code ${key} --value ${value};

    if [ $key == "KEY_PAGEUP" ] && [ $value == "1" ]; then
        wsNext
    fi

    if [ $key == "KEY_PAGEDOWN" ] && [ $value == "1" ]; then
        wsPrev
    fi

}

function pressCommand(){
    device=$1; button=$2; movement=$3
    var=$button[@]
    command=${!var}

    if [ ${movement} = ${pressed} ]; then
        for key in ${command}; do
            pressKey ${device} ${key} 1
        done
    else
        for key in ${command}; do
            pressKey ${device} ${key} 0
        done | tac
    fi
}

function parseEventLine(){
    device=$1
    action=$2
    button=$4
    movement=$6

    # compute only if right action
    if [ ${action} = ${action_type} ]; then
        pressCommand ${device} ${button} ${movement}
    fi
}

function mapDevice(){
    device=$1
    while read line; do
        parseEventLine ${line}
    done < <(stdbuf -oL libinput debug-events --device ${device} & )
}

if [[ ${devices[0]} == '' ]]; then
  echo "No Pointers Found. Try again."
  exit 1
fi

for device in ${devices[@]}; do
    ( mapDevice ${device} ) &
done

wait
